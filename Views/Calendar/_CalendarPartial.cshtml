@model Agenda.Models.CalendarModels.Calendar
@{
  var date = Model.Date;
  var schedules = Model.User.Workcenters.SelectMany(w => w.Schedules);

  var firstday = new DateOnly(date.Year, date.Month, 1);
  var weekday = firstday.DayOfWeek;
  var daysinmonth = DateTime.DaysInMonth(date.Year, date.Month);
  var startday = ((int)DayOfWeek.Saturday - (int)firstday.DayOfWeek) - 6;
}
<div class="shadow ring-1 ring-black ring-opacity-5 lg:flex lg:flex-auto lg:flex-col">
  <div
    class="grid grid-cols-7 gap-px border-b border-gray-300 bg-gray-200 text-center text-xs font-semibold leading-6 text-gray-700 lg:flex-none">
    <div class="flex justify-center bg-white py-2">
      <span class="md:hidden">D</span>
      <span class="sr-only sm:not-sr-only">Domingo</span>
    </div>
    <div class="flex justify-center bg-white py-2">
      <span class="md:hidden">L</span>
      <span class="sr-only sm:not-sr-only">Lunes</span>
    </div>
    <div class="flex justify-center bg-white py-2">
      <span class="md:hidden">M</span>
      <span class="sr-only sm:not-sr-only">Martes</span>
    </div>
    <div class="flex justify-center bg-white py-2">
      <span class="md:hidden">X</span>
      <span class="sr-only sm:not-sr-only">Miércoles</span>
    </div>
    <div class="flex justify-center bg-white py-2">
      <span class="md:hidden">J</span>
      <span class="sr-only sm:not-sr-only">Jueves</span>
    </div>
    <div class="flex justify-center bg-white py-2">
      <span class="md:hidden">V</span>
      <span class="sr-only sm:not-sr-only">Viernes</span>
    </div>
    <div class="flex justify-center bg-white py-2">
      <span class="md:hidden">S</span>
      <span class="sr-only sm:not-sr-only">Sábado</span>
    </div>
  </div>
  <div class="flex bg-gray-100 text-xs leading-6 text-gray-700 lg:flex-auto">
    <div class="hidden w-full lg:grid lg:grid-cols-7 lg:gap-px">
      @for (int i = startday; i < daysinmonth; i++)
      {
        if (i < 0)
        {
          <div class="relative bg-gray-100 px-3 py-2">
          </div>
        }
        else
        {
          var datenow = firstday.AddDays(i);
          var schedule = schedules.Where(f => f.Workdate == datenow);

          @if (schedule.Count() > 0)
          {
            <div class="relative bg-yellow-100 px-3 py-2 hover:cursor-pointer">
              <time datetime="@datenow">@datenow.ToString("dd")</time>
              <ol>
                @foreach (var item in schedule)
                {
                  <li>
                    <span
                      class="flex-auto truncate font-medium text-gray-900 group-hover:text-indigo-600">@item.Center.Name</span>
                    <div class="group flex">
                      <time datetime="@item.Starttime"
                        class="ml-3 hidden flex-none text-gray-500 group-hover:text-indigo-600 xl:block">@item.Starttime</time>
                      <time datetime="@item.Endtime"
                        class="ml-3 hidden flex-none text-gray-500 group-hover:text-indigo-600 xl:block">@item.Endtime</time>
                    </div>
                  </li>
                }
              </ol>
            </div>
          }
          else
          {
            <div class="relative bg-white px-3 py-2">
              <time datetime="@datenow">@datenow.ToString("dd")</time>
            </div>
          }
        }

      }
    </div>

    <!--
            Always include: "relative py-2 px-3"
            Is current month, include: "bg-white"
            Is not current month, include: "bg-gray-50 text-gray-500"
          -->
    <div class="isolate grid w-full grid-cols-7 gap-px lg:hidden">
      <!--
            Always include: "flex h-14 flex-col py-2 px-3 hover:bg-gray-100 focus:z-10"
            Is current month, include: "bg-white"
            Is not current month, include: "bg-gray-50"
            Is selected or is today, include: "font-semibold"
            Is selected, include: "text-white"
            Is not selected and is today, include: "text-indigo-600"
            Is not selected and is current month, and is not today, include: "text-gray-900"
            Is not selected, is not current month, and is not today: "text-gray-500"
          -->
      @for (int i = startday; i < daysinmonth; i++)
      {
        if (i < 0)
        {
          <div class="relative bg-gray-100 px-3 py-2">
          </div>
        }
        else
        {
          var datenow = firstday.AddDays(i);
          var schedule = schedules.Where(f => f.Workdate == datenow);

          @if (schedule.Count() > 0)
          {
            <div class="relative bg-yellow-100 px-3 py-2 hover:cursor-pointer" onclick="loadSchedule(@datenow.Day, @datenow.Month, @datenow.Year)">
              <time datetime="@datenow">@datenow.ToString("dd")</time>
            </div>
          }
          else
          {
            <div class="relative bg-white px-3 py-2" onclick="loadSchedule(@datenow.Day, @datenow.Month, @datenow.Year)">
              <time datetime="@datenow">@datenow.ToString("dd")</time>
            </div>
          }
        }
      }
    </div>
  </div>
</div>
<div id="schedule-card-container" class="mt-6">
</div>

<script>
  function loadSchedule(day, month, year) {
    $.ajax({
      url: '@Url.Action("GetScheduleByDate", "Calendar")',
      type: 'GET',
      data: { day: day,
              month: month,
              year: year },
      success: function (result) {
        $('#schedule-card-container').html(result);
      },
      error: function (xhr, status, error) {
        console.error(error);
      }
    });
  }
</script>